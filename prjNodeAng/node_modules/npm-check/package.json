{
  "_args": [
    [
      {
        "raw": "npm-check",
        "scope": null,
        "escapedName": "npm-check",
        "name": "npm-check",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\user\\Desktop\\prjNodeAng"
    ]
  ],
  "_from": "npm-check@latest",
  "_id": "npm-check@5.4.4",
  "_inCache": true,
  "_location": "/npm-check",
  "_nodeVersion": "6.10.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/npm-check-5.4.4.tgz_1494545379216_0.5247272674459964"
  },
  "_npmUser": {
    "name": "dylang",
    "email": "dylang@gmail.com"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "npm-check",
    "scope": null,
    "escapedName": "npm-check",
    "name": "npm-check",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/npm-check/-/npm-check-5.4.4.tgz",
  "_shasum": "ce754ec9f3ed12ec74a2c5a6be7bc6f134f228ed",
  "_shrinkwrap": null,
  "_spec": "npm-check",
  "_where": "C:\\Users\\user\\Desktop\\prjNodeAng",
  "author": {
    "name": "Dylan Greene",
    "email": "dylang@gmail.com"
  },
  "bin": {
    "npm-check": "bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/dylang/npm-check/issues"
  },
  "dependencies": {
    "babel-runtime": "^6.6.1",
    "callsite-record": "^3.0.0",
    "chalk": "^1.1.3",
    "co": "^4.6.0",
    "depcheck": "^0.6.3",
    "execa": "^0.2.2",
    "giturl": "^1.0.0",
    "global-modules": "^0.2.0",
    "globby": "^4.0.0",
    "inquirer": "^0.12.0",
    "is-ci": "^1.0.8",
    "lodash": "^4.7.0",
    "meow": "^3.7.0",
    "merge-options": "0.0.64",
    "minimatch": "^3.0.2",
    "node-emoji": "^1.0.3",
    "ora": "^0.2.1",
    "package-json": "^4.0.1",
    "path-exists": "^2.1.0",
    "pkg-dir": "^1.0.0",
    "semver": "^5.0.1",
    "semver-diff": "^2.0.0",
    "text-table": "^0.2.0",
    "throat": "^2.0.2",
    "update-notifier": "^2.1.0"
  },
  "description": "Check for outdated, incorrect, and unused dependencies.",
  "devDependencies": {
    "babel-cli": "^6.6.5",
    "babel-plugin-transform-runtime": "^6.6.0",
    "babel-preset-es2015": "^6.6.0",
    "xo": "^0.13.0"
  },
  "directories": {},
  "dist": {
    "shasum": "ce754ec9f3ed12ec74a2c5a6be7bc6f134f228ed",
    "tarball": "https://registry.npmjs.org/npm-check/-/npm-check-5.4.4.tgz"
  },
  "engines": {
    "node": ">=0.11.0"
  },
  "files": [
    "bin",
    "lib",
    "lib-es5"
  ],
  "gitHead": "01a3c472778883a0c1d7da26ef619f48818a68a4",
  "homepage": "https://github.com/dylang/npm-check",
  "keywords": [
    "npm",
    "outdated",
    "dependencies",
    "unused",
    "changelog",
    "check",
    "updates",
    "api",
    "interactive",
    "cli",
    "safe",
    "updating",
    "updater",
    "installer",
    "devDependencies"
  ],
  "license": "MIT",
  "main": "lib",
  "maintainers": [
    {
      "name": "dylang",
      "email": "dylang@gmail.com"
    },
    {
      "name": "linusu",
      "email": "linus@folkdatorn.se"
    }
  ],
  "name": "npm-check",
  "optionalDependencies": {},
  "readme": "npm-check\n=========\n[![Build Status](https://travis-ci.org/dylang/npm-check.svg?branch=master)](https://travis-ci.org/dylang/npm-check)\n[![NPM version](https://badge.fury.io/js/npm-check.svg)](http://badge.fury.io/js/npm-check)\n[![Dependency Status](https://img.shields.io/david/dylang/npm-check.svg)](https://david-dm.org/dylang/npm-check)\n[![npm](https://img.shields.io/npm/dm/npm-check.svg?maxAge=2592000)]()\n\n> Check for outdated, incorrect, and unused dependencies.\n\n<img width=\"796\" alt=\"npm-check -u\" src=\"https://cloud.githubusercontent.com/assets/51505/9569917/96947fea-4f48-11e5-9783-2d78077256f2.png\">\n\n### Features\n\n* Tells you what's out of date.\n* Provides a link to the package's documentation so you can decide if you want the update.\n* Kindly informs you if a dependency is not being used in your code.\n* Works on your globally installed packages too, via `-g`.\n* **Interactive Update** for less typing and fewer typos, via `-u`.\n* Supports public and private [@scoped/packages](https://docs.npmjs.com/getting-started/scoped-packages).\n* Supports ES6-style [`import from`](http://exploringjs.com/es6/ch_modules.html) syntax.\n* Upgrades your modules using your installed version of npm, including the new `npm@3`, so dependencies go where you expect them.\n* Works with any public npm registry, [private registries](https://www.npmjs.com/enterprise), and alternate registries like [Sinopia](https://github.com/rlidwka/sinopia).\n* Does not query registries for packages with `private: true` in their package.json.\n* Emoji in a command-line app, because command-line apps can be fun too.\n* Works with `npm@2` and `npm@3`, as well as newer alternative installers like `ied` and `pnpm`.\n\n### Requirements\n* Node >= 0.11.\n\n### On the command line\n\nThis is the easiest way to use `npm-check`.\n\n### Install\n```bash\n$ npm install -g npm-check\n```\n\n### Use\n```bash\n$ npm-check\n```\n\n<img width=\"882\" alt=\"npm-check\" src=\"https://cloud.githubusercontent.com/assets/51505/9569919/99c2412a-4f48-11e5-8c65-e9b6530ee991.png\">\n\nThe result should look like the screenshot, or something nice when your packages are all up-to-date and in use.\n\nWhen updates are required it will return a non-zero response code that you can use in your CI tools.\n\n### Options\n\n```\nUsage\n  $ npm-check <path> <options>\n\nPath\n  Where to check. Defaults to current directory. Use -g for checking global modules.\n\nOptions\n  -u, --update          Interactive update.\n  -g, --global          Look at global modules.\n  -s, --skip-unused     Skip check for unused packages.\n  -p, --production      Skip devDependencies.\n  -d, --dev-only        Look at devDependencies only (skip dependencies).\n  -i, --ignore          Ignore dependencies based on succeeding glob.\n  -E, --save-exact      Save exact version (x.y.z) instead of caret (^x.y.z) in package.json.\n  --specials            List of depcheck specials to include in check for unused dependencies.\n  --no-color            Force or disable color output.\n  --no-emoji            Remove emoji support. No emoji in default in CI environments.\n  --debug               Show debug output. Throw in a gist when creating issues on github.\n\nExamples\n  $ npm-check           # See what can be updated, what isn't being used.\n  $ npm-check ../foo    # Check another path.\n  $ npm-check -gu       # Update globally installed modules by picking which ones to upgrade.\n```\n\n![npm-check-u](https://cloud.githubusercontent.com/assets/51505/9569912/8c600cd8-4f48-11e5-8757-9387a7a21316.gif)\n\n#### `-u, --update`\n\nShow an interactive UI for choosing which modules to update.\n\nAutomatically updates versions referenced in the `package.json`.\n\n_Based on recommendations from the `npm` team, `npm-check` only updates using `npm install`, not `npm update`.\nTo avoid using more than one version of `npm` in one directory, `npm-check` will automatically install updated modules\nusing the version of `npm` installed globally._\n\n<img width=\"669\" alt=\"npm-check -g -u\" src=\"https://cloud.githubusercontent.com/assets/51505/9569921/9ca3aeb0-4f48-11e5-95ab-6fdb88124007.png\">\n\n##### Update using [ied](https://github.com/alexanderGugel/ied) or [pnpm](https://github.com/rstacruz/pnpm)\n\nSet environment variable `NPM_CHECK_INSTALLER` to the name of the installer you wish to use.\n\n```bash\nNPM_CHECK_INSTALLER=pnpm npm-check -u\n## pnpm install --save-dev foo@version --color=always\n```\n\nYou can also use this for dry-run testing:\n\n```bash\nNPM_CHECK_INSTALLER=echo npm-check -u\n```\n\n#### `-g, --global`\n\nCheck the versions of your globally installed packages.\n\n_Tip: Use `npm-check -u -g` to do a safe interactive update of global modules, including npm itself._\n\n#### `-s, --skip-unused`\n\nBy default `npm-check` will let you know if any of your modules are not being used by looking at `require` statements\nin your code.\n\nThis option will skip that check.\n\nThis is enabled by default when using `global` or `update`.\n\n#### `-p, --production`\n\nBy default `npm-check` will look at packages listed as `dependencies` and `devDependencies`.\n\nThis option will let it ignore outdated and unused checks for packages listed as `devDependencies`.\n\n#### `-d, --dev-only`\n\nIgnore `dependencies` and only check `devDependencies`.\n\nThis option will let it ignore outdated and unused checks for packages listed as `dependencies`.\n\n#### `-i, --ignore`\n\nIgnore dependencies that match specified glob.\n\n`$ npm-check -i babel-*` will ignore all dependencies starting with 'babel-'.\n\n#### `-E, --save-exact`\n\nInstall packages using `--save-exact`, meaning exact versions will be saved in package.json.\n\nApplies to both `dependencies` and `devDependencies`.\n\n#### `--specials`\n\nCheck special (e.g. config) files when looking for unused dependencies.\n\n`$ npm-check --specials=bin,webpack` will look in the `scripts` section of package.json and in webpack config.\n\nSee [https://github.com/depcheck/depcheck#special](https://github.com/depcheck/depcheck#special) for more information.\n\n#### `--color, --no-color`\n\nEnable or disable color support.\n\nBy default `npm-check` uses colors if they are available.\n\n#### `--emoji, --no-emoji`\n\nEnable or disable emoji support. Useful for terminals that don't support them. Automatically disabled in CI servers.\n\n#### `--spinner, --no-spinner`\n\nEnable or disable the spinner. Useful for terminals that don't support them. Automatically disabled in CI servers.\n\n### API\n\nThe API is here in case you want to wrap this with your CI toolset.\n\n```js\nconst npmCheck = require('npm-check');\n\nnpmCheck(options)\n  .then(currentState => console.log(currentState.get('packages')));\n```\n\n#### `update`\n\n* Interactive update.\n* default is `false`\n\n#### `global`\n\n* Check global modules.\n* default is `false`\n* `cwd` is automatically set with this option.\n\n#### `skipUnused`\n\n* Skip checking for unused packages.\n* default is `false`\n\n#### `ignoreDev`\n\n* Ignore `devDependencies`.\n* This is called `--production` on the command line to match `npm`.\n* default is `false`\n\n#### `devOnly`\n\n* Ignore `dependencies` and only check `devDependencies`.\n* default is `false`\n\n#### `ignore`\n\n* Ignore dependencies that match specified glob.\n* default is `[]`\n\n#### `saveExact`\n\n* Update package.json with exact version `x.y.z`  instead of semver range `^x.y.z`.\n* default is `false`\n\n#### `debug`\n\n* Show debug output. Throw in a gist when creating issues on github.\n* default is `false`\n\n#### `cwd`\n\n* Override where `npm-check` checks.\n* default is `process.cwd()`\n\n#### `specials`\n\n* List of [`depcheck`](https://github.com/depcheck/depcheck) special parsers to include.\n* default is `''`\n\n#### `currentState`\n\nThe result of the promise is a `currentState` object, look in [state.js](https://github.com/dylang/npm-check/blob/master/lib/util/state.js) to see how it works.\n\nYou will probably want `currentState.get('packages')` to get an array of packages and the state of each of them.\n\nEach item in the array will look like the following:\n\n```js\n{\n  moduleName: 'lodash',                 // name of the module.\n  homepage: 'https://lodash.com/',      // url to the home page.\n  regError: undefined,                  // error communicating with the registry\n  pkgError: undefined,                  // error reading the package.json\n  latest: '4.7.0',                      // latest according to the registry.\n  installed: '4.6.1',                   // version installed\n  isInstalled: true,                    // Is it installed?\n  notInstalled: false,                  // Is it installed?\n  packageWanted: '4.7.0',               // Requested version from the package.json.\n  packageJson: '^4.6.1',                // Version or range requested in the parent package.json.\n  devDependency: false,                 // Is this a devDependency?\n  usedInScripts: undefined,             // Array of `scripts` in package.json that use this module.\n  mismatch: false,                      // Does the version installed not match the range in package.json?\n  semverValid: '4.6.1',                 // Is the installed version valid semver?\n  easyUpgrade: true,                    // Will running just `npm install` upgrade the module?\n  bump: 'minor',                        // What kind of bump is required to get the latest, such as patch, minor, major.\n  unused: false                         // Is this module used in the code?\n},\n```\n\nYou will also see this if you use `--debug` on the command line.\n\n### Inspiration\n\n* [npm outdated](https://www.npmjs.com/doc/cli/npm-outdated.html) - awkward output, requires --depth=0 to be grokable.\n* [david](https://github.com/alanshaw/david) - does not work with private registries.\n* [update-notifier](https://github.com/yeoman/update-notifier) - for single modules, not everything in package.json.\n* [depcheck](https://github.com/depcheck/depcheck) - only part of the puzzle. npm-check uses depcheck.\n\n### About the Author\n\nHi! Thanks for checking out this project! My name is **Dylan Greene**. When not overwhelmed with my two young kids I enjoy contributing\nto the open source community. I'm also a tech lead at [Opower](https://opower.com/). [![@dylang](https://img.shields.io/badge/github-dylang-green.svg)](https://github.com/dylang) [![@dylang](https://img.shields.io/badge/twitter-dylang-blue.svg)](https://twitter.com/dylang)\n\nHere's some of my other Node projects:\n\n| Name | Description | npm&nbsp;Downloads |\n|---|---|---|\n| [`grunt‑notify`](https://github.com/dylang/grunt-notify) | Automatic desktop notifications for Grunt errors and warnings. Supports OS X, Windows, Linux. | [![grunt-notify](https://img.shields.io/npm/dm/grunt-notify.svg?style=flat-square)](https://www.npmjs.org/package/grunt-notify) |\n| [`shortid`](https://github.com/dylang/shortid) | Amazingly short non-sequential url-friendly unique id generator. | [![shortid](https://img.shields.io/npm/dm/shortid.svg?style=flat-square)](https://www.npmjs.org/package/shortid) |\n| [`space‑hogs`](https://github.com/dylang/space-hogs) | Discover surprisingly large directories from the command line. | [![space-hogs](https://img.shields.io/npm/dm/space-hogs.svg?style=flat-square)](https://www.npmjs.org/package/space-hogs) |\n| [`rss`](https://github.com/dylang/node-rss) | RSS feed generator. Add RSS feeds to any project. Supports enclosures and GeoRSS. | [![rss](https://img.shields.io/npm/dm/rss.svg?style=flat-square)](https://www.npmjs.org/package/rss) |\n| [`grunt‑prompt`](https://github.com/dylang/grunt-prompt) | Interactive prompt for your Grunt config using console checkboxes, text input with filtering, password fields. | [![grunt-prompt](https://img.shields.io/npm/dm/grunt-prompt.svg?style=flat-square)](https://www.npmjs.org/package/grunt-prompt) |\n| [`xml`](https://github.com/dylang/node-xml) | Fast and simple xml generator. Supports attributes, CDATA, etc. Includes tests and examples. | [![xml](https://img.shields.io/npm/dm/xml.svg?style=flat-square)](https://www.npmjs.org/package/xml) |\n| [`changelog`](https://github.com/dylang/changelog) | Command line tool (and Node module) that generates a changelog in color output, markdown, or json for modules in npmjs.org's registry as well as any public github.com repo. | [![changelog](https://img.shields.io/npm/dm/changelog.svg?style=flat-square)](https://www.npmjs.org/package/changelog) |\n| [`grunt‑attention`](https://github.com/dylang/grunt-attention) | Display attention-grabbing messages in the terminal | [![grunt-attention](https://img.shields.io/npm/dm/grunt-attention.svg?style=flat-square)](https://www.npmjs.org/package/grunt-attention) |\n| [`observatory`](https://github.com/dylang/observatory) | Beautiful UI for showing tasks running on the command line. | [![observatory](https://img.shields.io/npm/dm/observatory.svg?style=flat-square)](https://www.npmjs.org/package/observatory) |\n| [`anthology`](https://github.com/dylang/anthology) | Module information and stats for any @npmjs user | [![anthology](https://img.shields.io/npm/dm/anthology.svg?style=flat-square)](https://www.npmjs.org/package/anthology) |\n| [`grunt‑cat`](https://github.com/dylang/grunt-cat) | Echo a file to the terminal. Works with text, figlets, ascii art, and full-color ansi. | [![grunt-cat](https://img.shields.io/npm/dm/grunt-cat.svg?style=flat-square)](https://www.npmjs.org/package/grunt-cat) |\n\n_This list was generated using [anthology](https://github.com/dylang/anthology)._\n\n### License\nCopyright (c) 2016 Dylan Greene, contributors.\n\nReleased under the [MIT license](https://tldrlegal.com/license/mit-license).\n\nScreenshots are [CC BY-SA](https://creativecommons.org/licenses/by-sa/4.0/) (Attribution-ShareAlike).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dylang/npm-check.git"
  },
  "scripts": {
    "lint": "xo ./lib/*.js",
    "prepublish": "npm run transpile",
    "test": "npm run lint && ./bin/cli.js || echo Exit Status: $?.",
    "transpile": "babel lib --out-dir lib-es5",
    "watch": "babel lib --out-dir lib-es5 --watch"
  },
  "types": "./index.d.ts",
  "typings": "./index.d.ts",
  "version": "5.4.4",
  "xo": {
    "space": 4,
    "rules": {
      "no-warning-comments": [
        0
      ],
      "global-require": [
        0
      ]
    }
  }
}
