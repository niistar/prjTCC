{
  "_args": [
    [
      {
        "raw": "callsite-record@^3.0.0",
        "scope": null,
        "escapedName": "callsite-record",
        "name": "callsite-record",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "C:\\Users\\user\\Desktop\\prjNodeAng\\node_modules\\npm-check"
    ]
  ],
  "_from": "callsite-record@>=3.0.0 <4.0.0",
  "_id": "callsite-record@3.2.2",
  "_inCache": true,
  "_location": "/callsite-record",
  "_nodeVersion": "6.6.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/callsite-record-3.2.2.tgz_1474383677042_0.08531129383482039"
  },
  "_npmUser": {
    "name": "inikulin",
    "email": "ifaaan@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "callsite-record@^3.0.0",
    "scope": null,
    "escapedName": "callsite-record",
    "name": "callsite-record",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/npm-check"
  ],
  "_resolved": "https://registry.npmjs.org/callsite-record/-/callsite-record-3.2.2.tgz",
  "_shasum": "9a0390642e43fe8bb823945e51464f69f41643de",
  "_shrinkwrap": null,
  "_spec": "callsite-record@^3.0.0",
  "_where": "C:\\Users\\user\\Desktop\\prjNodeAng\\node_modules\\npm-check",
  "author": {
    "name": "Ivan Nikulin",
    "url": "ifaaan@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/inikulin/source-frame/issues"
  },
  "dependencies": {
    "callsite": "^1.0.0",
    "chalk": "^1.1.1",
    "error-stack-parser": "^1.3.3",
    "highlight-es": "^1.0.0",
    "lodash": "4.6.1 || ^4.16.1",
    "pinkie-promise": "^2.0.0"
  },
  "description": "Create fancy log entries for errors and function call sites.",
  "devDependencies": {
    "eslint": "^1.10.3",
    "mocha": "^2.4.5",
    "publish-please": "^2.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "9a0390642e43fe8bb823945e51464f69f41643de",
    "tarball": "https://registry.npmjs.org/callsite-record/-/callsite-record-3.2.2.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "990e8798f30f569425a7aff6b00df4e42d7b8946",
  "homepage": "https://github.com/inikulin/source-frame#readme",
  "keywords": [
    "source",
    "code",
    "frame",
    "stack",
    "callstack",
    "call",
    "source-code"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "inikulin",
      "email": "ifaaan@gmail.com"
    }
  ],
  "name": "callsite-record",
  "optionalDependencies": {},
  "readme": "# callsite-record\r\n[![Build Status](https://api.travis-ci.org/inikulin/callsite-record.svg)](https://travis-ci.org/inikulin/callsite-record)\r\n\r\n*Create fancy log entries for errors and function call sites.*\r\n\r\n**For Error:**\r\n```js\r\n'use strict';\r\n\r\nconst createCallsiteRecord = require('callsite-record');\r\n\r\nfunction myFunc() {\r\n    throw new Error('Yo!');\r\n}\r\n\r\ntry {\r\n    myFunc();\r\n}\r\ncatch(err) {\r\n    console.log(createCallsiteRecord(err).renderSync());\r\n}\r\n\r\n```\r\n\r\n ⬇\r\n\r\n![example](https://raw.githubusercontent.com/inikulin/callsite-record/master/media/example1.png)\r\n\r\n\r\n\r\n**For function call up in the stack:**\r\n\r\n```js\r\n'use strict';\r\n\r\nconst createCallsiteRecord = require('callsite-record');\r\n\r\nfunction func2 () {\r\n    (function func1 () {\r\n        console.log(createCallsiteRecord('func2').renderSync());\r\n    })();\r\n}\r\n\r\nfunc2();\r\n```\r\n\r\n ⬇\r\n\r\n![example](https://raw.githubusercontent.com/inikulin/callsite-record/master/media/example2.png)\r\n\r\n**Additional goodies:**\r\n- Use [renderers](#renderoptionsrenderer) for different output formats, e.g. to produce output in HTML.\r\n- Use [stack filter](#renderoptionsstackfilter) to produce clean and beautiful stacks, e.g. removing Node lib internal calls.\r\n\r\n## Install\r\n```\r\nnpm install callsite-record\r\n```\r\n\r\n## API\r\n### createCallsiteRecord(error, [isCallsiteFrame]) → CallsiteRecord\r\n\r\nYou can generate a callsite for any stack frame, not only the topmost one. Use the `isCallsiteFrame` function to select\r\na frame. This function is called for each frame starting from the top. Return `true` for the desired frame to generate\r\nthe callsite.\r\n\r\n*Example:*\r\n```js\r\nconst createCallsiteRecord = require('callsite-record');\r\n\r\ntry {\r\n    throw new Error(\"We're doomed\");\r\n}\r\ncatch(err) {\r\n    const record = createCallsiteRecord(err);\r\n}\r\n```\r\n\r\n### createCallsiteRecord(functionName, [typeName]) → CallsiteRecord\r\n\r\nCreates `CallsiteRecord` for the function up in the call stack specified by `functionName`. You can optionally specify a\r\n`typeName` if the function is a method. If the function is a constructor set `functionName` to `constructor`.\r\n\r\n*Example:*\r\n```js\r\nconst createCallsiteRecord = require('callsite-record');\r\n\r\n(function func1() {\r\n    (function func2() {\r\n        (function func3() {\r\n            const record = createCallsiteRecord('func2');\r\n        })();\r\n    })();\r\n})();\r\n```\r\n\r\n### CallsiteRecord\r\n#### CallsiteRecord.render([renderOptions]) → Promise&lt;String&gt;\r\nRenders call site record to the string.\r\n\r\n*Example:*\r\n```js\r\nrecord.render().then(str => console.log(str));\r\n```\r\n\r\n#### CallsiteRecord.renderSync([renderOptions]) → String\r\nSync version of the `CallsiteRecord.render`.\r\n\r\n##### renderOptions.frameSize\r\nSpecifies the number of lines rendered above and below the call site in the code frame. **Default:** `5`.\r\n\r\n*Example:*\r\n```js\r\nconsole.log(record.renderSync({ frameSize: 0 }));\r\n// > 12 |    func1();\r\n// ...\r\n\r\nconsole.log(record.renderSync({ frameSize: 1 }));\r\n//   11 |(function func2() {\r\n// > 12 |    func1();\r\n//   13 |})();\r\n// ...\r\n```\r\n\r\n##### renderOptions.codeFrame\r\nSpecifies if code frame should be rendered. If disabled only stack will be rendered. **Default:** `true`.\r\n\r\n##### renderOptions.stack\r\nSpecifies if stack trace should be rendered in addition to the code frame. **Default:** `true`.\r\n\r\n##### renderOptions.stackFilter\r\nFunction that will be used to filter stack frames. Function accepts 2 arguments:\r\n - `stackFrame` - stack entry.\r\n - `idx` - index of the frame.\r\n - `isV8StackFrame` - if `true` then `stackFrame` is a V8 [CallSite](https://github.com/v8/v8/wiki/Stack-Trace-API#customizing-stack-traces) object.\r\n Otherwise it's a [StackFrame](https://github.com/stacktracejs/stackframe) object.\r\n\r\n**Default:** `null`.\r\n\r\n*Example:*\r\n```js\r\nconst sep = require('path').sep;\r\n\r\n// Remove node core lib calls from the stack trace\r\nrecord.renderSync({ stackFilter: frame => frame.getFileName().indexOf(sep) > -1 });\r\n```\r\n\r\n##### renderOptions.renderer\r\nSpecifies the output format of the rendering. **Default:** `renderers.default`. You can pass your own\r\nrenderer object ([example implementations](https://github.com/inikulin/callsite-record/tree/master/lib/renderers)) or use\r\none of the built-in renderers:\r\n\r\n###### renderers.default\r\nProvides ANSI-colored output as shown above.\r\n\r\n*Usage:*\r\n```js\r\nconst defaultRenderer = require('callsite-record').renderers.default;\r\n\r\nrecord.renderSync({ renderer: defaultRenderer });\r\n```\r\n\r\n###### renderers.noColor\r\nSame as `default` renderer but without colors.\r\n\r\n*Usage:*\r\n```js\r\nconst noColorRenderer = require('callsite-record').renderers.noColor;\r\n\r\nrecord.renderSync({ renderer: noColorRenderer });\r\n```\r\n\r\n###### renderers.html\r\nOutputs HTML that can be later decorated with the CSS and embeded into the web page. [Example output](https://github.com/inikulin/callsite-record/blob/master/test/data/expected-html/0.html).\r\n\r\n*Usage:*\r\n```js\r\nconst htmlRenderer = require('callsite-record').renderers.html;\r\n\r\nrecord.renderSync({ renderer: html });\r\n```\r\n\r\n\r\n## Related\r\n * [is-es2016-keyword](https://github.com/inikulin/is-es2016-keyword) - Determine if string is an ES2016 keyword.\r\n * [highlight-es](https://github.com/inikulin/highlight-es) - Highlight ECMAScript syntax for the console or any other medium.\r\n\r\n## Author\r\n[Ivan Nikulin](https://github.com/inikulin) (ifaaan@gmail.com)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/inikulin/source-frame.git"
  },
  "scripts": {
    "prepublish": "publish-please guard",
    "publish-please": "publish-please",
    "test": "eslint lib test && mocha"
  },
  "version": "3.2.2"
}
